@implements IDisposable

<Autocomplete
    TItem="MetadataEntity"
    TValue="MetadataEntity"
    Data="_posts"
    TextField="@(( item ) => item.Metadata.Title)"
    ValueField="@(( item ) => item)"
    Filter="AutocompleteFilter.Contains"
    Placeholder="Search..."
    FreeTyping
    CustomFilter="SearchFilter"
    SelectedValueChanged="@PostMetaSelected">
    <NotFoundContent>No results.</NotFoundContent>
</Autocomplete>

@code {
    [Inject]
    protected IRepository<MetadataEntity> _repo { get; set; }

    [Inject]
    protected NavigationManager _nav { get; set; }

    [Inject]
    protected PersistentComponentState _appState { get; set; }

    private PersistingComponentStateSubscription persistingSubscription;
    private IEnumerable<MetadataEntity> _posts { get; set; } = Enumerable.Empty<MetadataEntity>();

    private static Func<MetadataEntity, string, bool> SearchFilter = (item, searchValue) 
    => {
        string[] metaStrings = new string[] { item.Metadata.Author, item.Metadata.Description, item.Metadata.Title };
        var searchStrings = metaStrings.Union(item.Metadata.Keywords);

        List<int> matchRatios = new();
        foreach (var str in searchStrings)
        {
            matchRatios.Add(Fuzz.WeightedRatio(str, searchValue));
        }
        
        return matchRatios.Any(x => x >= 60); // Will include the metadata object if any of the strings was better than 75% match
    };

    private void PostMetaSelected(MetadataEntity value)
    {
        if (value is not null && value.Metadata.Id != Guid.Empty)
            _nav.NavigateTo($"{value.Type.ToLower()}/{value.Metadata.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = _appState.RegisterOnPersisting(PersistData);
        await LoadPosts();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        if (_appState.TryTakeFromJson<IEnumerable<MetadataEntity>>(Constants.StoredMeta, out IEnumerable<MetadataEntity> restoredPosts))
        {
            _posts = restoredPosts!;
        }
        else
        {
            _posts = await _repo.Read();
        }
    }

    private Task PersistData()
    {
        try
        {
            _appState.PersistAsJson(Constants.StoredMeta, _posts);
        }
        catch { }
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }
}