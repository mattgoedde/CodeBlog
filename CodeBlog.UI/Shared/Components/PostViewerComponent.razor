@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public Guid? Id { get; set; }

    [CascadingParameter]
    public bool IsLoading { get; set; }

    [Inject] 
    protected IJSRuntime _js { get; set; }

    [Inject]
    protected IRepository<Post> _repo { get; set; }

    [Inject]
    protected PersistentComponentState _appState { get; set; }

    protected Post _post { get; set; }
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = _appState.RegisterOnPersisting(PersistData);
        await LoadPost();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPost();
    }

    private async Task LoadPost()
    {
        if (Id is null || Id == Guid.Empty) return;

        IsLoading = true;
        if (_appState.TryTakeFromJson<Post>(Constants.StoredPost, out Post restoredPost) && Id == restoredPost.Metadata.Id)
        {
            _post = restoredPost!;
        }
        else
        {
            _post = await _repo.Read(Id ?? Guid.Empty);
        }
        IsLoading = false;
    }

    private Task PersistData()
    {
        _appState.PersistAsJson(Constants.StoredPost, _post);

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _js.InvokeVoidAsync("highlightSnippet");
    }
}
