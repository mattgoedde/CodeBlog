@page "/post/create"
@page "/post/update/{id:guid}"
@inherits PostViewerComponent
@using System.Web

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <Row>
                    <Column>
                        <CardTitle><TextEdit Size="Size.Large" @bind-Text="@title" Placeholder="Post Title"/></CardTitle>
                    </Column>
                </Row>
                <Row>
                    <Column>
                        <TextEdit @bind-Text="@description" Placeholder="Description" />
                    </Column>
                </Row>
                <Divider />
                <Row>
                    <Column ColumnSize="ColumnSize.IsHalf">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Size="Size.Small" @bind-Text="@currentTag" Placeholder="New Tag" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Clicked="@OnAddTagButtonClicked" Size="Size.Small"><Icon Name="IconName.Add" /></Button>
                            </Addon>
                        </Addons>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsHalf">
                        <Div Display="Display.Flex">
                        @foreach(var tag in tags)
                        {
                            <Badge Margin="Margin.Is1" Height="Height.Is100" Color="Color.Primary" Pill CloseClicked="@(() => OnTagCloseClicked(tag))">@tag</Badge>
                        }
                        </Div>
                    </Column>
                </Row>
            </CardHeader>
            <CardBody>
                <Row>
                    <Column>
                        <Markdown 
                            SpellChecker="@(false)"
                            Value="@HttpUtility.HtmlDecode(markdownValue)" 
                            ValueChanged="@(async (value) => await OnMarkdownValueChanged(HttpUtility.HtmlEncode(value)))" 
                            HideIcons="@(new string[] {"quote", "image", "table"})"/>
                    </Column>
                </Row>
            </CardBody>
            <CardFooter>
                <Button Clicked="@OnSaveButtonClicked" Type="ButtonType.Button" Color="Color.Success">Save & Exit</Button>
                <Button Clicked="@OnDeleteButtonClicked" Type="ButtonType.Button" Color="Color.Danger">Delete</Button>
            </CardFooter>
        </Card>
    </Column>
</Row>
@code {
    // Post Editor Logic
    [Inject]
    protected NavigationManager _nav { get; set; }

    [Inject]
    protected IMessageService MessageService { get; set; }

    [Inject] 
    protected INotificationService NotificationService { get; set; }

    string title = "";
    string description = "";
    string markdownValue = "";
    List<string> tags = new();
    string currentTag = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _js.InvokeVoidAsync("highlightSnippet");
    }

    protected async Task OnMarkdownValueChanged(string value)
    {
        markdownValue = value;
        await _js.InvokeVoidAsync("highlightSnippet");
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_post is not null)
        {
            title = _post.Metadata.Title;
            description = _post.Metadata.Description;
            markdownValue = _post.Content;
            tags = _post.Metadata.Keywords.ToList();
        }
    }

    private async Task OnSaveButtonClicked()
    {
        if (await MessageService.Confirm("Are you sure you want to save?", "Confirmation"))
        {
            try
            {
                Guid id = await SavePost();

                await NotificationService.Success("Saved successfully!");

                await Task.Delay(250);

                _nav.NavigateTo($"post/{id}");
            }
            catch (Exception ex)
            {
                await NotificationService.Error(ex.Message, "Error encountered!");
            }

        }
    }

    private async Task OnDeleteButtonClicked()
    {
        if (await MessageService.Confirm( "Are you sure you want to delete this post? This cannot be undone.", "Confirmation"))
        {
            try
            {
                await _repo.Delete(Id ?? throw new Exception());

                await NotificationService.Success("Deleted successfully!");

                _nav.NavigateTo($"/");
            }
            catch (Exception ex)
            {
                await NotificationService.Error(ex.Message, "Error encountered!");
            }
        }
    }

    private void OnAddTagButtonClicked()
    {
        tags.Add(currentTag);
        currentTag = string.Empty;
    }

    private void OnTagCloseClicked(string value)
    {
        tags.Remove(value);
    }

    private async Task<Guid> SavePost()
    {
        Guid returnGuid = Guid.Empty;
        IsLoading = true;

        if (_post is null) // Create logic
        {
            var newPost = new Post
            {
                Metadata = new MetadataValues
                {
                    Title = title,
                    Description = description,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = default!,
                    Author = "Matthew Goedde",
                    Keywords = tags
                },
                Content = markdownValue
            };

            newPost = await _repo.Create(newPost);

            returnGuid = newPost.Metadata.Id;
        }
        else // Update logic
        {
            _post = _post with 
            { 
                Content = markdownValue, 
                Metadata = _post.Metadata with 
                { 
                    Title = title, 
                    Keywords = tags, 
                    Description = description 
                } 
            };

            var updatedPost = await _repo.Update(Id ?? throw new Exception(), _post);

            returnGuid = updatedPost.Metadata.Id;
        }

        IsLoading = false;
        return returnGuid;
    }
}