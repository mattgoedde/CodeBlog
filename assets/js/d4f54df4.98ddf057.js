"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=o.createContext({}),i=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=i(e.components);return o.createElement(m.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=i(n),d=a,u=g["".concat(m,".").concat(d)]||g[d]||c[d]||r;return n?o.createElement(u,s(s({ref:t},p),{},{components:n})):o.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[g]="string"==typeof e?e:a,s[1]=l;for(var i=2;i<r;i++)s[i]=n[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var o=n(7462),a=(n(7294),n(3905));const r={},s="MethodTimeLogger",l={unversionedId:"snippets/method-time-logger",id:"snippets/method-time-logger",title:"MethodTimeLogger",description:"A class to log the time taken to execute a method.",source:"@site/docs/snippets/method-time-logger.md",sourceDirName:"snippets",slug:"/snippets/method-time-logger",permalink:"/docs/snippets/method-time-logger",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LINQ",permalink:"/docs/snippets/linq"}},m={},i=[],p={toc:i},g="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"methodtimelogger"},"MethodTimeLogger"),(0,a.kt)("p",null,"A class to log the time taken to execute a method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.Extensions.Logging;\nusing System.Diagnostics;\nusing System.Runtime.CompilerServices;\n\nnamespace YourNamespace;\n\n/// <summary>\n/// Automatically logs the elapsed time of the scope it is inside of\n/// </summary>\npublic sealed class MethodTimeLogger : IDisposable\n{\n    private readonly Type _type;\n    private readonly ILogger? _logger;\n    private readonly LogLevel _logLevel;\n    private readonly string _methodName;\n    private readonly string? _message;\n    private readonly Stopwatch _stopwatch;\n\n    /// <summary>\n    /// Automatically logs the elapsed time of the scope it is inside of\n    /// </summary>\n    /// <param name="logger">The logger to use</param>\n    /// <param name="logLevel">The level in which to log the message</param>\n    /// <param name="message">An optional extension of the message</param>\n    /// <param name="methodName">Filled in by the runtime</param>\n    public MethodTimeLogger(Type type, ILogger? logger, LogLevel logLevel = LogLevel.Trace, string? message = null, [CallerMemberName] string methodName = "")\n    {\n        _type = type;\n        _logger = logger;\n        _logLevel = logLevel;\n        _message = message;\n        _methodName = methodName;\n        _stopwatch = Stopwatch.StartNew();\n    }\n\n    public void Dispose()\n    {\n        _stopwatch.Stop();\n        if (_message is null)\n        {\n            _logger?.Log(_logLevel, "{class}.{method} {duration}", _type.Name, _methodName, _stopwatch.Elapsed);\n        }\n        else\n        {\n            string methodName = _type.Name;\n            if (!string.IsNullOrEmpty(_methodName))\n            {\n                methodName += $".{_methodName}";\n            }\n\n            _logger?.Log(_logLevel, "{method} {duration} - {message}", methodName, _stopwatch.Elapsed, _message);\n        }\n    }\n}\n\n\n/// <summary>\n/// Automatically logs the elapsed time of the scope it is inside of\n/// </summary>\n/// <typeparam name="TClass">Enclosing class</typeparam>\npublic sealed class MethodTimeLogger<TClass> : IDisposable\n{\n    private readonly ILogger<TClass>? _logger;\n    private readonly LogLevel _logLevel;\n    private readonly string _methodName;\n    private readonly string? _message;\n    private readonly Stopwatch _stopwatch;\n\n    /// <summary>\n    /// Automatically logs the elapsed time of the scope it is inside of\n    /// </summary>\n    /// <param name="logger">The logger to use</param>\n    /// <param name="logLevel">The level in which to log the message</param>\n    /// <param name="message">An optional extension of the message</param>\n    /// <param name="methodName">Filled in by the runtime</param>\n    public MethodTimeLogger(ILogger<TClass>? logger, LogLevel logLevel = LogLevel.Trace, string? message = null, [CallerMemberName] string methodName = "")\n    {\n        _logger = logger;\n        _logLevel = logLevel;\n        _message = message;\n        _methodName = methodName;\n        _stopwatch = Stopwatch.StartNew();\n    }\n\n    public void Dispose()\n    {\n        _stopwatch.Stop();\n        if (_message is null)\n        {\n            _logger?.Log(_logLevel, "{class}.{method} {duration}", typeof(TClass).Name, _methodName, _stopwatch.Elapsed);\n        }\n        else\n        {\n            string methodName = typeof(TClass).Name;\n            if (!string.IsNullOrEmpty(_methodName))\n            {\n                methodName += $".{_methodName}";\n            }\n            \n            _logger?.Log(_logLevel, "{method} {duration} - {message}", methodName, _stopwatch.Elapsed, _message);\n        }\n    }\n}\n\n\n')))}c.isMDXComponent=!0}}]);