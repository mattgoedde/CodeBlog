"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[743],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),y=a,d=u["".concat(p,".").concat(y)]||u[y]||m[y]||s;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=y;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={},o="HttpClient Extensions",i={unversionedId:"snippets/httpclient-extensions",id:"snippets/httpclient-extensions",title:"HttpClient Extensions",description:"Extra extension methods for HttpClient",source:"@site/docs/snippets/httpclient-extensions.md",sourceDirName:"snippets",slug:"/snippets/httpclient-extensions",permalink:"/docs/snippets/httpclient-extensions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FormSerializer",permalink:"/docs/snippets/form-serializer"},next:{title:"LINQ",permalink:"/docs/snippets/linq"}},p={},l=[],c={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"httpclient-extensions"},"HttpClient Extensions"),(0,a.kt)("p",null,"Extra extension methods for ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpClient")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Diagnostics.CodeAnalysis;\nusing System.Text.Json;\n\nnamespace YourNamespace;\n\n/// <summary>\n/// Extension methods adding additional functionality to HttpClient\n/// </summary>\npublic static class HttpClientExtensions\n{\n    /// <summary>\n    /// Send a POST request to the supplied URL with Form payload\n    /// </summary>\n    /// <typeparam name="TResponse">Type of Response expected</typeparam>\n    /// <param name="client">The HttpClient used to send request</param>\n    /// <param name="requestUri">The URI to send the request to</param>\n    /// <param name="formDictionary">Payload of key value pairs</param>\n    /// <param name="options">Optional. <see cref="JsonSerializerOptions"/> to configure deserializing the response</param>\n    /// <param name="cancellationToken">Optional. <see cref="CancellationToken"/></param>\n    /// <returns>Body content deserialized from JSON</returns>\n    /// <exception cref="ArgumentNullException">Null or Empty request URI</exception>\n    public static async Task<TResponse?> PostAsFormDataAsync<TResponse>(this HttpClient client, [StringSyntax(StringSyntaxAttribute.Uri)] string? requestUri, Dictionary<string, string> formDictionary, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default)\n    {\n        if (string.IsNullOrEmpty(requestUri))\n        {\n            throw new ArgumentNullException(nameof(requestUri));\n        }\n\n        FormUrlEncodedContent formContent = new(formDictionary);\n        \n        HttpResponseMessage response = await client.PostAsync(requestUri, formContent, cancellationToken);\n\n        string responseContentString = await response.Content.ReadAsStringAsync(cancellationToken);\n\n        return JsonSerializer.Deserialize<TResponse>(responseContentString, options);\n    }\n\n    /// <summary>\n    /// PostAsJsonAsync, but with a JSON response body\n    /// </summary>\n    /// <typeparam name="TValue">Type of payload to send</typeparam>\n    /// <typeparam name="TResponse">Type of payload to receive</typeparam>\n    /// <param name="client">The <see cref="HttpClient"/> to send the request</param>\n    /// <param name="requestUri">The URI to send the request to</param>\n    /// <param name="value">The payload to send the the request URI</param>\n    /// <param name="options">Optional. <see cref="JsonSerializerOptions"/> to configure deserializing the response</param>\n    /// <param name="cancellationToken">Optional. <see cref="CancellationToken"/></param>\n    /// <returns>Body content deserialized from JSON</returns>\n    /// <exception cref="ArgumentNullException"></exception>\n    public static async Task<TResponse?> PostAsJsonAsync<TValue, TResponse>(this HttpClient client, [StringSyntax(StringSyntaxAttribute.Uri)] string? requestUri, TValue value, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default)\n    {\n        if (string.IsNullOrEmpty(requestUri))\n        {\n            throw new ArgumentNullException(nameof(requestUri));\n        }\n\n        HttpResponseMessage response = await client.PostAsJsonAsync(requestUri, value, options, cancellationToken: cancellationToken);\n\n        string responseContentString = await response.Content.ReadAsStringAsync(cancellationToken);\n\n        return JsonSerializer.Deserialize<TResponse>(responseContentString, options);\n    }\n\n    /// <summary>\n    /// PostAsJsonAsync, but with a JSON response body\n    /// </summary>\n    /// <typeparam name="TValue">Type of payload to send</typeparam>\n    /// <typeparam name="TResponse">Type of payload to receive</typeparam>\n    /// <param name="client">The <see cref="HttpClient"/> to send the request</param>\n    /// <param name="requestUri">The URI to send the request to</param>\n    /// <param name="value">The payload to send the the request URI</param>\n    /// <param name="options">Optional. <see cref="JsonSerializerOptions"/> to configure deserializing the response</param>\n    /// <param name="cancellationToken">Optional. <see cref="CancellationToken"/></param>\n    /// <returns>Body content deserialized from JSON</returns>\n    /// <exception cref="ArgumentNullException"></exception>\n    public static async Task<TResponse?> PostAsJsonAsync<TValue, TResponse>(this HttpClient client, Uri? requestUri, TValue value, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default)\n    {\n        HttpResponseMessage response = await client.PostAsJsonAsync(requestUri, value, options, cancellationToken: cancellationToken);\n\n        string responseContentString = await response.Content.ReadAsStringAsync(cancellationToken);\n\n        return JsonSerializer.Deserialize<TResponse>(responseContentString, options);\n    }\n\n    /// <summary>\n    /// Send POST request without body content and deserialize response\n    /// </summary>\n    /// <typeparam name="TResponse">Object to receive</typeparam>\n    /// <param name="client">The <see cref="HttpClient"/> to send the request</param>\n    /// <param name="requestUri">The URI to send the request to</param>\n    /// <param name="options">Optional. <see cref="JsonSerializerOptions"/> to configure deserializing the response</param>\n    /// <param name="cancellationToken">Optional. <see cref="CancellationToken"/></param>\n    /// <returns>Body content deserialized from JSON</returns>\n    /// <exception cref="ArgumentNullException"></exception>\n    /// <returns></returns>\n    public static async Task<TResponse?> PostWithoutBodyAsync<TResponse>(this HttpClient client, string requestUri, JsonSerializerOptions? options = null, CancellationToken cancellationToken = default)\n    {\n        if (string.IsNullOrEmpty(requestUri))\n        {\n            throw new ArgumentNullException(nameof(requestUri));\n        }\n\n        HttpRequestMessage request = new(HttpMethod.Post, requestUri);\n\n        HttpResponseMessage response = await client.SendAsync(request, cancellationToken);\n\n        string responseContentString = await response.Content.ReadAsStringAsync(cancellationToken);\n\n        return JsonSerializer.Deserialize<TResponse>(responseContentString, options);\n    }\n}\n')))}m.isMDXComponent=!0}}]);